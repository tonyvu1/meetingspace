<header>
  <% include partials/nav_meeting.ejs %>
</header>

<style>
  #mainNav {
    display: none;
  }

  #chat-body {
    border: 1px solid rgb(212, 212, 212);
    -webkit-box-shadow: 2px 0px 15px -5px rgba(0, 0, 0, 0.26);
    box-shadow: 2px 0px 15px -5px rgba(0, 0, 0, 0.26);
  }

  .chat {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .chat li {
    margin-bottom: 10px;
    padding-bottom: 5px;
    border-bottom: 1px dotted #b3a9a9;
  }

  .chat li .chat-body p {
    margin: 0;
    color: #777777;
  }

  .body-panel {
    overflow-y: scroll;
    height: 230px;
  }

  #local-media {
    position: absolute;
    bottom: 1vw;
    right: 1vw;

    width: 24vw;
    height: 18vw;
    border-radius: 1vw;
  }

  div#local-media video {
    max-width: 100%;
    max-height: 100%;
    border: none;
    border-radius: 1vw;
  }

  @media screen and (min-width: 992px) {
    #local-media {
      width: 15vw;
      height: 11.26vw;
    }
  }

  #remote-media {
    position: relative;

    padding: 0;
    min-height: 30vh;
    background: transparent;

    -webkit-box-shadow: 2px 0px 15px -5px rgba(0, 0, 0, 0.26);
    box-shadow: 2px 0px 15px -5px rgba(0, 0, 0, 0.26);
  }

  div#remote-media video {
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  #button-preview {
    opacity: 100;
  }

  .wrapper-section {
    padding: 8vh 0 0;
  }
</style>

<script>
  window.onload = function() {
    document.getElementById("button-preview").click();
  };
</script>
<section class="wrapper-section">
  <div>
    <div class="col-12 mt-0" id="classroom-container">
      <div class="row justify-content-center">
        <div class="col-lg-7 col-xm-12 mr-3" id="remote-media">
          <div id="local-media"></div>
        </div>

        <div class="col-lg-4 col-sm-12 mt-1" id="chat-wrapper">
          <div class="col-md-12" id="chat-body">
            <div class="panel panel-primary">
              <div class="panel-heading text-center">
                <span class="glyphicon glyphicon-comment"></span>
                <strong>&#160;</strong>
              </div>
              <div class="panel-body body-panel">
                <ul class="chat"></ul>
              </div>
              <div class="panel-footer clearfix">
                <input id="message" class="form-control" type="text" />
                <span
                  class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-xs-12"
                  style="margin-top: 10px"
                >
                  <button
                    class="btn btn-warning btn-lg btn-block"
                    id="btn-chat"
                  >
                    Send
                  </button>
                </span>
              </div>
            </div>
          </div>

          <p class="text-right">
            <a
              class="btn btn-secondary mt-2 pull-right"
              data-toggle="collapse"
              href="#viewLog"
              role="button"
              aria-expanded="false"
            >
              Connection Info
            </a>
          </p>
          <div class="collapse" id="viewLog">
            <div class="col-md-12 mt-2" id="log"></div>
          </div>
        </div>
      </div>
    </div>

    <div id="controls">
      <div id="room-controls">
        <button class="btn btn-primary mt-2 pull-right" id="button-join">
          Begin Meeting
        </button>

        <input id="room-name" type="text" value="Meeting" readonly />

        <button class="btn btn-secondary mt-2 pull-left" id="button-leave">
          Leave Meeting
        </button>
      </div>
    </div>

    <script src="/style/jquery/jquery.min.js"></script>

    <!-- The video meeting works with Twilio_Video API, which is housed at style/scripts/twilio_video. -->
    <script src="/style/scripts/twilio_video.js"></script>
    <script src="https://media.twiliocdn.com/sdk/js/chat/v1.1/twilio-chat.min.js"></script>
  </div>
</section>

<style>
  #button-join {
    margin-left: 4.5rem;
    z-index: 5;
  }

  #button-leave {
    position: absolute;
    margin-left: 4.5rem;
    left: 0;
    display: none;
  }

  #room-name,
  #button-preview {
    opacity: 0;
  }

  #log {
    border: 1px solid #686865;
    height: 15em;
    text-align: left;
    padding: 1.5em;
    float: right;
    overflow-y: scroll;
  }

  #log p {
    color: #000000;
    font-family: "Share Tech Mono", "Courier New", Courier, fixed-width;
    font-size: 1em;
    margin-left: 1em;
    text-indent: -1.25em;
    width: 90%;
  }
</style>

<script id="new-message" type="text/template">
  <li id="{{id}}" class="right clearfix">
      <div class="chat-body clearfix">
          <p>
              {{body}}
          </p>
      </div>
  </li>
</script>

<%# This script is borrowed from a working example of Twilio chat. I just
customized it so that the username is the user that is currently logged into
site. %>
<script>
  $(document).ready(function() {
    let username = "<%= name %>";
    let chatChannel;

    getToken()
      .then(token => {
        console.log("returned token is ", token);
        return Twilio.Chat.Client.create(token, { logLevel: "debug" });
      })
      .then(client => {
        getChannelDescriptor(client)
          .then(channel => client.getChannelByUniqueName("chat34channel"))
          .then(channel => channel.join())
          .then(channel => {
            chatSetupCompleted();
            chatChannel = channel;
            channel.on("messageAdded", onMessageAdded);
            activateChatBox();
          });
      })
      .catch(
        error =>
          console.log("error setting up twilio", error) || chatSetupFailed()
      );

    function getToken() {
      return fetch(`/tokenChat?username=${username}`)
        .then(response => {
          if (response.ok) {
            return response.text();
          }

          throw new Error("Network response was not ok.");
        })
        .catch(error => console.log("Error fetching token", error) || error);
    }

    function getChannelDescriptor(chatClient) {
      return chatClient
        .getPublicChannelDescriptors()
        .then(function(paginator) {
          if (paginator.items.length > 0) return paginator.items[0];
          else {
            chatClient
              .createChannel({
                uniqueName: "chat3channel",
                friendlyName: "chat3channel",
                isPrivate: false
              })
              .then(function(newChannel) {
                console.log("Created general channel:");
                console.log(newChannel);
                return newChannel;
              });
          }
        })
        .then(channel => channel)
        .catch(error => console.log("error getting channel", error) || error);
    }

    function onMessageAdded(message) {
      let template = $("#new-message").html();
      template = template.replace(
        "{{body}}",
        `<b>${message.author}:</b> ${message.body}`
      );

      $(".chat").append(template);
    }

    function chatSetupCompleted() {
      let template = $("#new-message").html();
      template = template.replace(
        "{{body}}",
        "<b>Let's start the meeting!</b>"
      );

      $(".chat").append(template);
    }

    function chatSetupFailed() {
      let template = $("#new-message").html();
      template = template.replace(
        "{{body}}",
        "<b>Chat Setup Failed. Contact Admin.</b>"
      );

      $(".chat").append(template);
    }

    function activateChatBox() {
      $("#message").removeAttr("disabled");
      $("#btn-chat").click(function() {
        const message = $("#message").val();
        $("#message").val("");

        //send message
        chatChannel.sendMessage(message);
      });

      $("#message").on("keydown", function(e) {
        if (e.keyCode === 13) {
          $("#btn-chat").click();
        }
      });
    }
  });
</script>
